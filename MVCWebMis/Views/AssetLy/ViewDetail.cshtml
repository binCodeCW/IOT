@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "查看资产领用单";
}

@*脚本引用放在此处可以实现自定义函数自动提示*@
<script src="~/Scripts/CommonUtil.js"></script>
<script src="~/Content/JQueryTools/printThis/printThis.js"></script>

<!--此处放置业务表单的数据呈现，方便隔离，减少复杂性-->
@RenderPage("~/Views/Apply/ViewDetail.cshtml", new { applyId = Request["id"] })

<!--定义子表单数据呈现-->
<div class="portlet box green-meadow">
    <div class="portlet-title">
        <div class="caption">
            <i class="fa fa-cogs"></i>
            资产领用单-表单数据
        </div>
    </div>
    <div class="portlet-body flip-scroll">
        <div class="portlet-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label col-md-4">领用单号</label>
                        <div class="col-md-8">
                            <label id="BillNo2" name="BillNo" class="form-control"></label>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label col-md-4">领用资产</label>
                        <div class="col-md-8">
                            <label id="AssetDesc2" name="AssetDesc" class="form-control"></label>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label col-md-4">资产使用部门（单位）</label>
                        <div class="col-md-8">
                            <label id="LyDept2" name="LyDept" class="form-control"></label>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label col-md-4">资产管理部门（单位）</label>
                        <div class="col-md-8">
                            <label id="ChargeDept2" name="ChargeDept" class="form-control"></label>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label col-md-4">使用部门资产管理员</label>
                        <div class="col-md-8">
                            <label id="DeptAdmin2" name="DeptAdmin" class="form-control"></label>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label col-md-4">备注信息</label>
                        <div class="col-md-8">
                            <label id="Note2" name="Note" class="form-control"></label>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label col-md-4">附件组别ID</label>
                        <div class="col-md-8">
                            <input id="AttachGUID2" name="AttachGUID" type="hidden" />
                            <div id="div_files"></div>
                        </div>
                    </div>
                </div>

                <div class="col-md-12">
                    <div class="portlet light portlet-fit ">
                        <div class="portlet-title">
                            <div class="caption">
                                <i class="icon-settings font-red"></i>
                                <span class="caption-subject font-red sbold uppercase">明细清单</span>
                                <button type="button" class="btn btn-circle btn-sm btn-primary" onclick="EditList()" id="btnEditList">录入明细</button>
                            </div>
                        </div>
                        <div class="portlet-body">
                            <div class="portlet-body" id="gridDiv">
                                <table class="table table-striped table-hover table-bordered" id="grid"></table>
                            </div>
                            <!-- BEGIN EXAMPLE TABLE PORTLET-->

                            <div class="portlet-body" id="AddDetail">
                                <div class="table-toolbar">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="btn-group">
                                                <button id="detail_editable_1_new" class="btn green">
                                                    新增记录
                                                    <i class="fa fa-plus"></i>
                                                </button>
                                                <button id="btnSaveDetail" class="btn red" onclick="SaveDetail()">
                                                    保存明细
                                                    <i class="glyphicon glyphicon-floppy-saved "></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <table class="table table-striped table-hover table-bordered" id="detail_editable_1">
                                    <thead>
                                        <tr>
                                            <th> 资产名称 </th>
                                            <th style="display:none"> 资产编码 </th>
                                            <th> 使用部门 </th>
                                            <th> 使用人 </th>
                                            <th> 存放地点 </th>
                                            <th> 单位 </th>
                                            <th> 单价 </th>
                                            <th> 数量 </th>
                                            <th> 金额（元） </th>
                                            <th> 备注 </th>
                                            <th> 编辑 </th>
                                            <th> 删除 </th>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                            <!-- END EXAMPLE TABLE PORTLET-->
                        </div>
                    </div>
                </div>
                <div class="col-md-12">
                    <!--记录重要参数-->
                    <input type="hidden" id="ID2" name="ID" />
                </div>

                <div class="col-md-12" style="text-align:right">
                    <button type="button" class="btn red" onclick="BackToList()">返回</button>
                </div>
            </div>
        </div>
    </div>
</div>

@RenderPage("~/Views/Asset/SelectAsset.cshtml")

@section footerScript {
    <script>
        //页面初始化
        $(function () {
            LoadSubData();

            //编辑和显示列表
            $("#gridDiv").show();
            $("#AddDetail").hide();
            var applyId = '@Request["id"]';
            $.getJSON("/Apply/GetStatus?id=" + applyId, function (result) {
                if (result != 0) { //0为处理中 
                    $("#btnEditList").hide();
                } else {
                    $("#btnEditList").show();
                }
            });
        });

        var edit = false;
        function EditList() {
            if (!edit) {
                $("#gridDiv").hide();
                $("#AddDetail").show();
                $("#btnEditList").text("显示明细");

                BindDetail();//更新列表
            } else {
                $("#gridDiv").show();
                $("#AddDetail").hide();
                $("#btnEditList").text("录入明细");

                //获取明细
                var billNo = $("#BillNo2").text();
                Search(currentPage, billNo);
            }
            edit = !edit;
        }

        function LoadSubData() {
            //具体业务表单数据
            var applyId = '@Request["id"]';
            $.getJSON("/AssetLy/FindByApplyId?r=" + Math.random() + "&applyId=" + applyId, function (info) {
                $("#BillNo2").text(info.BillNo);
                $("#AssetDesc2").text(info.AssetDesc);
                $("#LyDept2").text(info.LyDept);
                $("#ChargeDept2").text(info.ChargeDept);
                $("#DeptAdmin2").text(info.DeptAdmin);
                $("#Note2").text(info.Note);

                //转义ID为名称
                $.getJSON("/OU/GetDeptNameByID?deptId=" + info.LyDept, function (result) {
                    $("#LyDept2").text(result);
                });
                $.getJSON("/OU/GetDeptNameByID?deptId=" + info.ChargeDept, function (result) {
                    $("#ChargeDept2").text(result);
                });
                $.getJSON("/User/GetFullNameByID?userid=" + info.DeptAdmin, function (result) {
                    $("#DeptAdmin2").text(result);
                });

                //附件处理
                $("#ID2").val(info.ID);
                $("#AttachGUID2").text(info.AttachGUID);
                ViewUpFiles(info.AttachGUID, "div_files");

                //获取明细
                Search(currentPage, info.BillNo);
            });
        };

        function BackToList() {
           history.go(-1);
        }

        var currentPage = 1, rows = 10; //分页参数：当前页，记录数
        var $table;
        var queryUrl;
        //初始化bootstrap-table的内容
        function Search(page, BillNo) {
            //记录页面bootstrap-table全局变量$table，方便应用
            queryUrl = '/AssetLyDetail/FindWithPager?rnd=' + Math.random() + "&WHC_BillNo=" + BillNo;
            $table = $('#grid').bootstrapTable({
                url: queryUrl,                   	//请求后台的URL（*）
                method: 'GET',                      //请求方式（*）
                //toolbar: '#toolbar',              //工具按钮用哪个容器
                striped: true,                      //是否显示行间隔色
                cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
                pagination: true,                   //是否显示分页（*）
                sortable: true,                     //是否启用排序
                sortOrder: "asc",                   //排序方式
                sidePagination: "server",           //分页方式：client客户端分页，server服务端分页（*）
                pageNumber: page,                      //初始化加载第一页，默认第一页,并记录
                pageSize: rows,                     //每页的记录行数（*）
                pageList: [10, 25, 50, 100],        //可供选择的每页的行数（*）
                search: false,                      //是否显示表格搜索
                strictSearch: true,
                showColumns: false,                  //是否显示所有的列（选择显示的列）
                showRefresh: false,                  //是否显示刷新按钮
                showToggle: false,                   //是否显示详细视图和列表视图的切换按钮
                minimumCountColumns: 2,             //最少允许的列数
                clickToSelect: true,                //是否启用点击选中行
                //height: 500,                      //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
                uniqueId: "ID",                     //每一行的唯一标识，一般为主键列
                cardView: false,                    //是否显示详细视图
                detailView: false,                  //是否显示父子表
                //得到查询的参数
                queryParams: function (params) {
                    //这里的键的名字和控制器的变量名必须一致，这边改动，控制器也需要改成一样的
                    var temp = {};//$("#ffSearch").serializeJsonObject();
                    temp["rows"] = params.limit;                        //页面大小
                    temp["page"] = (params.offset / params.limit) + 1;  //页码
                    temp["sort"] = params.sort;                         //排序列名
                    temp["sortOrder"] = params.order;                   //排位命令（desc，asc）
                    return temp;
                },
                columns: [{
                    checkbox: true,
                    visible: false                  //是否显示复选框
                },
                { title: '资产名称', field: 'AssetName' /*, width: 80, sortable: true */ },
                { title: '使用部门', field: 'LyDept' /*, width: 80, sortable: true */ },
                { title: '使用人', field: 'UsePerson' /*, width: 80, sortable: true */ },
                { title: '存放地点', field: 'KeepAddr' /*, width: 80, sortable: true */ },
                { title: '单位', field: 'Unit' /*, width: 80, sortable: true */ },
                { title: '单价', field: 'Price' /*, width: 80, sortable: true */ },
                { title: '数量', field: 'TotalQty' /*, width: 80, sortable: true */ },
                { title: '金额(元)', field: 'TotalAmount' /*, width: 80, sortable: true */ },
                { title: '备注', field: 'Note' /*, width: 80, sortable: true */ },
                ],
                onLoadSuccess: function () {
                    currentPage = page;//存储当前页码
                },
                onLoadError: function () {
                    showTips("数据加载失败！");
                },
                onDblClickRow: function (row, $element) {
                    //var id = row.ID;
                    //EditViewById(id, 'view');
                },
            });
        };

        //审批处理后的执行操作
        //该操作一般发生在申请单完成后，需要修改业务表单数据的情况
        function ToCompletedForm() {
            var applyId = '@Request["id"]';
            var postData = { applyId: applyId };
            var url = "/AssetLy/ToCompletedForm";
            $.post(url, postData, function (json) {
                var data = $.parseJSON(json);
                console.log(data.Success ? "处理表单数据成功" : "处理表单数据失败:");
            });
        }
    </script>

    <script>
        var DetailEditable = function () {
            //定义dataTable对象
            var table = $('#detail_editable_1');
            var oTable = table.dataTable({
                // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
                // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js).
                // So when dropdowns used the scrollable div should be removed.
                //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

                "lengthMenu": [
                    [5, 15, 20, -1],
                    [5, 15, 20, "All"] // 改变每页的行数
                ],

                // 使用汉化
                "language": {
                    url: '//cdn.datatables.net/plug-ins/3cfcc339e89/i18n/Chinese.json'
                },

                //初始化
                "pageLength": 5,
                "columnDefs": [{ // 设置默认列设置
                    'orderable': true,
                    'targets': [0]
                }, {
                    "searchable": true,
                    "targets": [0]
                }],
                "order": [
                    [0, "asc"]
                ] // 将第一列设置为asc的默认排序
            });

            var handleTable = function () {
                //恢复只读模式
                function restoreRow(oTable, nRow) {
                    var aData = oTable.fnGetData(nRow);
                    var jqTds = $('>td', nRow);

                    for (var i = 0, iLen = jqTds.length; i < iLen; i++) {
                        oTable.fnUpdate(aData[i], nRow, i, false);
                    }
                    oTable.fnDraw();
                }
                //编辑行
                function editRow(oTable, nRow) {
                    var aData = oTable.fnGetData(nRow);
                    var jqTds = $('>td', nRow);
                    var i = 0;
                    jqTds[i].innerHTML = '<input id="txtAssetName" type="text" class="form-control input-small" onclick="SelectAssets(this)" value="' + aData[i] + '">';//资产名称
                    i++;
                    jqTds[i].style.display = 'none';//隐藏该列
                    jqTds[i].innerHTML = '<input id="txtAssetCode" type="text" class="form-control input-small" readonly value="' + aData[i] + '">';//资产编码

                    i++;
                    var deptid = aData[i];
                    jqTds[i].innerHTML = '<select id="txtLyDept" class="form-control input-small" value="' + aData[i] + '"></select>';//使用部门
                    i++;
                    var userid = aData[i];
                    jqTds[i].innerHTML = '<select id="txtUsePerson" class="form-control input-small" value="' + aData[i] + '"></select>';//使用人
                    i++;
                    var keepAddr = aData[i];
                    jqTds[i].innerHTML = '<select id="txtKeepAddr" class="form-control input-small select2" value="' + aData[i] + '"></select>';//存放地点
                    i++; jqTds[i].innerHTML = '<input id="txtUnit" type="text" class="form-control input-small" readonly value="' + aData[i] + '">';//单位
                    i++; jqTds[i].innerHTML = '<input id="txtPrice" type="text" class="form-control input-small" readonly value="' + aData[i] + '">';//单价
                    i++; jqTds[i].innerHTML = '<input id="txtTotalQty" type="text" class="form-control input-small" readonly value="' + aData[i] + '">';//数量
                    i++; jqTds[i].innerHTML = '<input id="txtTotalAmount" type="text" class="form-control input-small" readonly value="' + aData[i] + '">';//金额(元)
                    i++; jqTds[i].innerHTML = '<input id="txtNote" type="text" class="form-control input-small" value="' + aData[i] + '">';//备注

                    i++; jqTds[i].innerHTML = '<a class="btn btn-xs green edit" href="" title="保存">保存</a>';
                    i++; jqTds[i].innerHTML = '<a class="btn btn-xs red cancel" href="" title="取消"><span class="glyphicon glyphicon-share-alt "></span></a>';

                    //初始化控件下拉列表
                    var companyid = '@Session["Company_ID"]';
                    var mydetpId = deptid !='' ? deptid: '@Session["DeptName"]|@Session["Dept_ID"]';
                    //初始化部门列表
                    BindSelect("txtLyDept", "/User/GetDeptDictJson2?parentId=" + companyid, '', function () {
                        $("#txtLyDept").val(mydetpId).trigger("change");
                    });

                    //部门编号后，用户列表编号
                    $("#txtLyDept").on("change", function (e) {
                        var deptNameId = $("#txtLyDept").val();
                        if (deptNameId != null) {
                            var id = deptNameId.substring(deptNameId.lastIndexOf("|") + 1);
                            BindSelect("txtUsePerson", "/User/GetUserDictJson2?deptId=" + id, '', function () {
                                $("#txtUsePerson").val(userid).trigger("change");
                            });

                            //存储位置
                            BindSelect("txtKeepAddr", "/StoreAddress/GetDictJson?deptId=" + id, '', function () {
                                $("#txtKeepAddr").val(keepAddr).trigger("change");
                            });
                        }
                    });
                }

                //保存行数据，切换到普通模式
                var inputLength = 10;//输入的字段数
                function saveRow(oTable, nRow) {
                    //var jqInputs = $('input', nRow);
                    var jqInputs = $("[id^='txt']", nRow);//id以txt开始([id^='txt']), id以txt结束([id$='txt'])

                    //更新行中每个input的值
                    for (var i = 0; i < inputLength; i++) {
                        oTable.fnUpdate(jqInputs[i].value, nRow, i, false);
                        iLen = i;
                    }

                    oTable.fnUpdate('<a class="btn btn-xs green edit" href="" title="编辑"><span class="glyphicon glyphicon-edit"></span></a>', nRow, inputLength, false);
                    oTable.fnUpdate('<a class="btn btn-xs red delete" href="" title="删除"><span class="glyphicon glyphicon-remove"></span></a>', nRow, inputLength + 1, false);
                    oTable.fnDraw();
                }
                //取消编辑模式
                function cancelEditRow(oTable, nRow) {
                    var jqInputs = $('input', nRow);
                    for (var i = 0; i < inputLength; i++) {
                        oTable.fnUpdate(jqInputs[i].value, nRow, i, false);
                        iLen = i;
                    }

                    oTable.fnUpdate('<a class="edit" href="">编辑</a>', nRow, inputLength, false);
                    oTable.fnDraw();
                }

                var nEditing = null;
                var nNew = false;

                $('#detail_editable_1_new').click(function (e) {
                    e.preventDefault();
                    if (nNew && nEditing) {
                        if (confirm("前面记录没有保存，您是否需要保存?")) {
                            saveRow(oTable, nEditing);
                            //$(nEditing).find("td:first").html("未保存");
                            nEditing = null;
                            nNew = false;
                        } else {
                            oTable.fnDeleteRow(nEditing); // cancel
                            nEditing = null;
                            nNew = false;
                            return;
                        }
                    }

                    //动态初始化集合 +2代表增加保存、取消列
                    let datas = [];
                    for (let i = 0; i < inputLength + 2; i++) {
                        datas.push('');
                    }
                    //添加一条新的记录
                    //oTable.fnAddData(['', '', '', '', '', '', '', '', '', '', '', '']);
                    var aiNew = oTable.fnAddData(datas);//使用动态初始化的数据
                    var nRow = oTable.fnGetNodes(aiNew[0]);
                    editRow(oTable, nRow);
                    nEditing = nRow;
                    nNew = true;
                });
                //删除操作
                table.on('click', '.delete', function (e) {
                    e.preventDefault();
                    if (confirm("您确认要删除该行记录吗?") == false) {
                        return;
                    }
                    //获取上一级tr行的数据
                    var nRow = $(this).parents('tr')[0];
                    var aData = oTable.fnGetData(nRow);

                    oTable.fnDeleteRow(nRow);
                });
                //取消操作
                table.on('click', '.cancel', function (e) {
                    e.preventDefault();
                    if (nNew) {
                        oTable.fnDeleteRow(nEditing);
                        nEditing = null;
                        nNew = false;
                    } else {
                        restoreRow(oTable, nEditing);
                        nEditing = null;
                    }
                });
                //编辑操作
                table.on('click', '.edit', function (e) {
                    e.preventDefault();
                    nNew = false;

                    /*获取所击连接的行对象*/
                    var nRow = $(this).parents('tr')[0];

                    if (nEditing !== null && nEditing != nRow) {
                        /* 当前正在编辑 - 但不是此行 - 在继续编辑模式之前恢复旧版 */
                        restoreRow(oTable, nEditing);
                        editRow(oTable, nRow);
                        nEditing = nRow;
                    } else if (nEditing == nRow && this.innerHTML == "保存") {
                        /* 编辑该行，并准备保存记录 */
                        saveRow(oTable, nEditing);
                        nEditing = null;

                    } else {
                        /* No edit in progress - let's start one */
                        editRow(oTable, nRow);
                        nEditing = nRow;
                    }
                });
            }

            //获取表格的数据，并返回对象列表
            function GetData() {
                var list = [];
                var trs = table.fnGetNodes();
                for (var i = 0; i < trs.length; i++) {
                    var data = table.fnGetData(trs[i]);//获取指定行的数据

                    //构建对象
                    var obj = {
                        AssetName: data[0],
                        AssetCode: data[1],
                        LyDept: data[2],
                        UsePerson: data[3],
                        KeepAddr: data[4],
                        Unit: data[5],
                        Price: data[6],
                        TotalQty: data[7],
                        TotalAmount: data[8],
                        Note: data[9],
                        BillNo: $("#BillNo2").text() //增加单号记录
                    };
                    list.push(obj);
                }
                return list;
            };
            //绑定列表数据
            function BindList(list) {
                if (list == null) return;

                oTable.fnClearTable();//清空一下table
                $.each(list, function (i, item) {
                    BindData(item);
                });
            }
            //绑定单条记录
            function BindData(item) {
                if (item == null) return;

                //AssetName AssetCode LyDept UsePerson KeepAddr Unit Price TotalQty TotalAmount Note
                let datas = [];
                datas.push(item.AssetName);
                datas.push(item.AssetCode);
                datas.push(item.LyDept);
                datas.push(item.UsePerson);
                datas.push(item.KeepAddr);
                datas.push(item.Unit);
                datas.push(item.Price);
                datas.push(item.TotalQty);
                datas.push(item.TotalAmount);
                datas.push(item.Note);

                //增加编辑、删除按钮
                datas.push('<a class="btn btn-xs green edit" href="" title="编辑"><span class="glyphicon glyphicon-edit"></span></a>');
                datas.push('<a class="btn btn-xs red delete" href="" title="删除"><span class="glyphicon glyphicon-remove"></span></a>');

                //添加一条新的记录
                var aiNew = oTable.fnAddData(datas);//使用动态初始化的数据
                var nRow = oTable.fnGetNodes(aiNew[0]);
                var aData = oTable.fnGetData(nRow);

                var jqTds = $('>td', nRow);
                jqTds[1].style.display = 'none';//隐藏指定列

                //循环更新每列数据
                for (var i = 0, iLen = jqTds.length; i < iLen; i++) {
                    oTable.fnUpdate(aData[i], nRow, i, false);
                }
                oTable.fnDraw();
            };

            //公布对象接口
            return {
                //main function to initiate the module
                init: function () {
                    handleTable();
                },
                GetData: function () {
                    return GetData();
                },
                BindList: function (list) {
                    BindList(list);
                }
            };
        }();

        //初始化对象相关函数
        $(function () {
            DetailEditable.init();
        });

        //提供函数调用对象接口
        function GetData() {
            return DetailEditable.GetData();
        }

        //选择资产后调用
        function OnSelectAsset(json) {
            ProcAssetJson = json;//存储到ProcAssetJson，方便下次打开界面初始化数据
            if (json != '') {
                var dict = JSON.parse(json);
                if (dict != null) {
                    for (var key in dict) {
                        var display = dict[key];
                        assetInput.val(display);

                        //txtKeepAddr txtUnit txtTotalQty txtTotalAmount
                        //更新数据
                        $.getJSON("/Asset/FindByCode?code=" + key, function (info) {
                            if (info != null) {
                                $("#txtAssetCode").val(info.Code);
                                //$("#txtKeepAddr").val(info.KeepAddr);
                                $("#txtUnit").val(info.Unit);
                                $("#txtPrice").val(info.Price);
                                $("#txtTotalQty").val(info.Qty);
                                $("#txtTotalAmount").val(info.OriginValue);
                            }
                        });
                    };
                }
            }
        }

        function BindDetail() {
            //显示明细信息
            var billNo = $("#BillNo2").text();
            $.getJSON("/AssetLyDetail/FindByBillNo?billNo=" + billNo, function (list) {
                if (list != null) {
                    DetailEditable.BindList(list);
                }
            });
        }

        //保存明细数据
        function SaveDetail() {
            //明细数据
            var list = GetData();
            var postData = { list: list, billno: $("#BillNo2").text() };
            postData = JSON.stringify(postData);//将JavaScript值转换为JSON字符串

            var url = "/AssetLyDetail/SaveDetail";
            $.post(url, postData, function (json) {
                var data = $.parseJSON(json);
                if (data.Success) {
                    //保存成功
                    showTips("保存明细数据成功");
                    //EditList();//更新状态
                    BindDetail();//更新列表
                }
                else {
                    showError("保存明细数据失败:" + data.ErrorMessage, 3000);
                }
            });
        }
    </script>
}
